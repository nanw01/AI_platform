version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: docker/Dockerfile.gateway
    command: >
      sh -c "pip install --no-cache-dir -r /app/api/gateway/requirements.txt &&
             cd /app && python -m uvicorn api.gateway.main:app --host 0.0.0.0 --port 8000 --reload"
    ports:
      - "8000:8000"
    volumes:
      - ./:/app
      - ./static:/app/static
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - ORCHESTRATOR_URL=http://orchestrator:7000
      - VAD_SERVICE_URL=http://vad-service:7001
      - ASR_SERVICE_URL=http://asr-service:7002
      - LLM_SERVICE_URL=http://llm-service:7003
      - TTS_SERVICE_URL=http://tts-service:7004
      - MEMORY_SERVICE_URL=http://memory-service:7005
      - INTENT_SERVICE_URL=http://intent-service:7006
    depends_on:
      orchestrator:
        condition: service_started
    networks:
      - ai-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Orchestrator
  orchestrator:
    image: python:3.10-slim
    command: >
      sh -c "apt-get update && apt-get install -y curl && 
             pip install --no-cache-dir -r /app/orchestrator/requirements.txt &&
             cd /app && python -m uvicorn orchestrator.main:app --host 0.0.0.0 --port 7000 --reload"
    volumes:
      - ./orchestrator:/app/orchestrator
      - ./shared:/app/shared
      - ./config:/app/config
    ports:
      - "7000:7000"
    environment:
      - VAD_SERVICE_URL=http://vad-service:7001
      - ASR_SERVICE_URL=http://asr-service:7002
      - LLM_SERVICE_URL=http://llm-service:7003
      - TTS_SERVICE_URL=http://tts-service:7004
      - MEMORY_SERVICE_URL=http://memory-service:7005
      - INTENT_SERVICE_URL=http://intent-service:7006
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
      - PYTHONPATH=/app
      - ENVIRONMENT=development
      - DEBUG=true
    depends_on:
      vad-service:
        condition: service_started
      asr-service:
        condition: service_started
      llm-service:
        condition: service_started
      tts-service:
        condition: service_started
      memory-service:
        condition: service_started
      intent-service:
        condition: service_started
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started
    networks:
      - ai-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7000/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # VAD Service
  vad-service:
    build:
      context: ./services/vad_service
      dockerfile: Dockerfile
    volumes:
      - ./services/vad_service:/app/services/vad_service
      - ./models/vad:/app/models/vad
      - ./shared:/app/shared
    ports:
      - "7001:7001"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - PYTHONPATH=/app
    networks:
      - ai-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7001/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # ASR Service
  asr-service:
    build:
      context: ./services/asr_service
      dockerfile: Dockerfile
    volumes:
      - ./services/asr_service:/app/services/asr_service
      - ./models/asr:/app/models/asr
      - ./shared:/app/shared
    ports:
      - "7002:7002"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - PYTHONPATH=/app
    networks:
      - ai-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7002/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # LLM Service
  llm-service:
    build:
      context: ./services/llm_service
      dockerfile: Dockerfile
    volumes:
      - ./services/llm_service:/app/services/llm_service
      - ./models/llm:/app/models/llm
      - ./shared:/app/shared
    ports:
      - "7003:7003"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - PYTHONPATH=/app
    networks:
      - ai-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7003/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # TTS Service
  tts-service:
    build:
      context: ./services/tts_service
      dockerfile: Dockerfile
    volumes:
      - ./services/tts_service:/app/services/tts_service
      - ./models/tts:/app/models/tts
      - ./shared:/app/shared
    ports:
      - "7004:7004"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - PYTHONPATH=/app
    networks:
      - ai-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7004/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Memory Service
  memory-service:
    build:
      context: ./services/memory_service
      dockerfile: Dockerfile
    volumes:
      - ./services/memory_service:/app/services/memory_service
      - ./models/memory:/app/models/memory
      - ./shared:/app/shared
    ports:
      - "7005:7005"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - PYTHONPATH=/app
      - REDIS_HOST=redis
      - MONGODB_HOST=mongodb
    depends_on:
      redis:
        condition: service_started
      mongodb:
        condition: service_started
    networks:
      - ai-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7005/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Intent Service
  intent-service:
    build:
      context: ./services/intent_service
      dockerfile: Dockerfile
    volumes:
      - ./services/intent_service:/app/services/intent_service
      - ./models/intent:/app/models/intent
      - ./shared:/app/shared
    ports:
      - "7006:7006"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - PYTHONPATH=/app
    networks:
      - ai-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7006/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Redis
  redis:
    image: redis:6.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 3

  # MongoDB
  mongodb:
    image: mongo:5.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - ai-network
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.9-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ai-network
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_running" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

networks:
  ai-network:
    driver: bridge

volumes:
  redis_data:
  mongodb_data:
  rabbitmq_data:
